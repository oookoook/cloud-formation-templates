AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Master template for an JavaScript SPA app with Node backend hosted in Lambda, using Aurora Serverless as a DB. Data
  are imported tu the DB from an S3 bucket by a Lambda function.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label: 
          default: "GitHub repository configuration"
        Parameters: 
          - GitHubUser
          - GitHubKey
          - GitHubBranch
          - GitHubFrontendRepo
          - GitHubBackendRepo
          - GitHubImportRepo
      - 
        Label: 
          default: "Network settings"
        Parameters: 
          - RootDomain
          - FrontendSubDomain
          - APISubDomain
          - FrontendCrtArn
          - BackendCrtArn
      - 
        Label: 
          default: "DB configuration"
        Parameters: 
          - AuroraDBName
          - KeyName
          - AuroraDBUser
          - AuroraDBPassword
          - DataBucketName
          - AwakeInterval

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:  
      TemplateURL: https://s3.eu-central-1.amazonaws.com/akucera-cf-templates/vpc-aurora-s3.yml
  Backend:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        APISubDomain: !Ref APISubDomain
        RootDomain: !Ref RootDomain 
        CrtArn: !Ref BackendCrtArn 
        GitHubRepo: !Ref GitHubBackendRepo
        GitHubUser: !Ref GitHubUser
        GitHubKey: !Ref GitHubKey
        GitHubBranch: !Ref GitHubBranch
        AuroraDBName: !Ref AuroraDBName
        AuroraDBUser: !Ref AuroraDBUser
        AuroraDBPassword: !Ref AuroraDBPassword
        AwakeInterval: !Ref AwakeInterval
        VpcId: !GetAtt VPC.Outputs.VpcId
        VpcSubnet1: !GetAtt VPC.Outputs.VpcSubnet1 
        VpcSubnet2: !GetAtt VPC.Outputs.VpcSubnet2
        VpcSecGroup: !GetAtt VPC.Outputs.VpcSecGroup 
      TemplateURL: https://s3.eu-central-1.amazonaws.com/akucera-cf-templates/pipeline-serverless-lambda-aurora-apigw.yml
  Import:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        GitHubRepo: !Ref GitHubImportRepo
        GitHubUser: !Ref GitHubUser
        GitHubKey: !Ref GitHubKey
        GitHubBranch: !Ref GitHubBranch
        AuroraDBEndpoint: !GetAtt Backend.Outputs.AuroraDBEndpoint
        AuroraDBName: !Ref AuroraDBName
        AuroraDBUser: !Ref AuroraDBUser
        AuroraDBPassword: !Ref AuroraDBPassword
        DataBucketName: !Ref DataBucketName
        VpcId: !GetAtt VPC.Outputs.VpcId
        VpcSubnet1: !GetAtt VPC.Outputs.VpcSubnet1 
        VpcSubnet2: !GetAtt VPC.Outputs.VpcSubnet2
        VpcSecGroup: !GetAtt VPC.Outputs.VpcSecGroup  
      TemplateURL: https://s3.eu-central-1.amazonaws.com/akucera-cf-templates/pipeline-serverless-lambda-aurora-s3.yml
  Frontend:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubDomain: !Ref FrontendSubDomain
        RootDomain: !Ref RootDomain 
        CrtArn: !Ref FrontendCrtArn 
        GitHubRepo: !Ref GitHubFrontendRepo
        GitHubUser: !Ref GitHubUser
        GitHubKey: !Ref GitHubKey
        GitHubBranch: !Ref GitHubBranch
        BackendUrl: !GetAtt Backend.Outputs.BackendUrl
        AwakeInterval: !Ref AwakeInterval
        CognitoUserPoolId: !GetAtt Backend.Outputs.CognitoUserPoolId
        CognitoClientId: !GetAtt Backend.Outputs.CognitoClientId
      TemplateURL: https://s3.eu-central-1.amazonaws.com/akucera-cf-templates/pipeline-spa-s3-cloudfront-route53.yml
Parameters:
  FrontendSubDomain:
    Type: String
  APISubDomain:
    Type: String
  RootDomain:
    Type: String
    Default: nastojte.cz
  FrontendCrtArn:
    Type: String
    Description: ARN of the ACM certificate for the frontend subdomain
    Default: >-
      arn:aws:acm:us-east-1:422001608153:certificate/1a07bc14-ecd5-4998-bfaa-2431c41f6642
  BackendCrtArn:
    Type: String
    Description: ARN of the ACM certificate for the API subdomain
    Default: >-
      arn:aws:acm:us-east-1:422001608153:certificate/1a07bc14-ecd5-4998-bfaa-2431c41f6642
  GitHubFrontendRepo:
    Type: String
    Description: GitHub repository - Frontend
  GitHubBackendRepo:
    Type: String
    Description: GitHub repository - Backend
  GitHubImportRepo:
    Type: String
    Description: GitHub repository - Import
  GitHubUser:
    Type: String
    Description: GitHub repo owner
    Default: oookoook
  GitHubKey:
    Type: String
    Description: GitHub API Key
  GitHubBranch:
    Type: String
    Description: GitHub branch to deploy from
    Default: master
  AuroraDBName:
    Type: String
    Description: Name for the created database. Must begin with a letter and contain only alphanumeric characters, letters must be lowercase.
  AuroraDBUser:
    Type: String
    Description: Username for the newly created DB user
  AuroraDBPassword:
    Type: String
    Description: Password that will be used for the newly created DB user
  DataBucketName:
    Type: String
    Description: Name for the data import bucket. The bucket must not exist. The bucket itself will be created by the template.
  AwakeInterval:
    Type: String
    Description: Interval in seconds after which the DB goes to sleep.
    Default: 1800
Outputs:
  VPC:
    Value: !GetAtt VPC.Outputs.VpcId
  DBEndpoint:
    Value: !GetAtt Backend.Outputs.AuroraDBEndpoint
  BackendUrl:
    Value: !GetAtt Backend.Outputs.BackendUrl
  FrontendUrl:
    Value: !GetAtt Frontend.Outputs.FrontendUrl
  CognitoARN:
    Value: !GetAtt Backend.Outputs.CognitoUserPoolArn
